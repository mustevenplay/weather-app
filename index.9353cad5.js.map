{"mappings":"AAGOA,eAAeC,EAAiBC,EAAWC,GAChD,MAAMC,EAAmB,eAAbF,EACR,+DAA+DC,EAAM,UAAUA,EAAM,aACrF,mDAAmDA,gBACvD,IACE,IAAIE,QAAqBC,MAAMF,GAC/B,aAAaC,EAAaE,MAC5B,CAAE,MAAOC,GAEP,OADAC,QAAQC,MAAMF,GACP,CAAC,CACV,CACF,CAIOR,eAAeW,EAAcC,GAClC,MAAOC,EAAUC,GAAaF,EACxBR,EAAM,mDAAmDS,eAAsBC,yBACrF,IAAIC,QAAoBT,MAAMF,GAE9B,OADAW,QAAoBA,EAAYR,OACGS,MAA/BD,EAAYE,iBACdR,QAAQC,MAAM,iDACP,CAAEQ,YAAa,MAEjBH,EAAYE,eACrB,CC1BO,SAASE,EAAiBC,GAC/B,OAAQA,GACN,KAAK,EAAG,MAAO,YACf,KAAK,EAAG,MAAO,eACf,KAAK,EAAG,MAAO,gBACf,KAAK,EAAG,MAAO,WACf,KAAK,GAAI,MAAO,MAChB,KAAK,GAAI,MAAO,sBAChB,KAAK,GAAI,MAAO,gBAChB,KAAK,GAAI,MAAO,mBAChB,KAAK,GAAI,MAAO,0BAChB,KAAK,GAAI,MAAO,yBAChB,KAAK,GAAI,MAAO,mCAChB,KAAK,GAAI,MAAO,cAChB,KAAK,GAAI,MAAO,gBAChB,KAAK,GAAI,MAAO,uBAChB,KAAK,GAAI,MAAO,sBAChB,KAAK,GAAI,MAAO,gCAChB,KAAK,GAAI,MAAO,mBAChB,KAAK,GAAI,MAAO,qBAChB,KAAK,GAAI,MAAO,4BAChB,KAAK,GAAI,MAAO,cAChB,KAAK,GAAI,MAAO,sBAChB,KAAK,GAAI,MAAO,wBAChB,KAAK,GAAI,MAAO,uBAChB,KAAK,GAAI,MAAO,sBAChB,KAAK,GAAI,MAAO,qBAChB,KAAK,GAAI,MAAO,kCAChB,KAAK,GAAI,MAAO,gCAChB,KAAK,GAAI,MAAO,+BAChB,QAAS,MAAO,uBAEpB,CC5BA,MACMC,EADeC,SAASC,cAAc,eACRA,cAAc,iBAC5CC,EAAkBF,SAASG,iBAAiB,qBAC5CC,EAAWJ,SAASC,cAAc,aAClCI,EAAWL,SAASC,cAAc,SAClCK,EAAeN,SAASC,cAAc,cACtCM,EAAkBP,SAASC,cAAc,gBACzCO,EAAeR,SAASC,cAAc,aAI5C,IAAIQ,GAAkB,EAClBC,EAAW,GAAIC,EAAc,CAAC,GAAI,IAEtC,SAASC,IACHH,GACFV,EAAec,MAAMC,eAAiB,OACtCZ,EAAgB,GAAGW,MAAME,MAAQ,OACjCb,EAAgB,GAAGW,MAAME,MAAQ,SACjCX,EAASY,UAAY,+EAE+BN,8BAIpDX,EAAec,MAAMC,eAAiB,QACtCZ,EAAgB,GAAGW,MAAME,MAAQ,SACjCb,EAAgB,GAAGW,MAAME,MAAQ,OACjCX,EAASY,UAAY,4GAEwDL,EAAY,kIAGXA,EAAY,6BAI9F,CAmBAjC,eAAeuC,IAEb,IAAIlC,EAYAmC,EAVAT,GACF1B,QAAqBJ,EAAgB,WAAY+B,GACjD3B,EAAeA,EAAa,IAE5BA,QAAqBJ,EAAgB,WAAYgC,GAGnDA,EAAY,GAAK5B,EAAaoC,IAC9BR,EAAY,GAAK5B,EAAaqC,IAG9B,IAAIC,EAAW,GAEftC,EAAauC,aAAaC,MAAM,MAAMC,SAAS,CAACC,EAAMC,KAC1C,IAANA,EACFR,EAAOO,EAEPJ,EAASM,KAAKF,EAAA,IAGlBJ,EAAWA,EAASO,KAAK,MAEblC,MAARwB,GACFb,EAASwB,UAAY,UACrBvB,EAAauB,UAAa,YAE1BxB,EAASwB,UAAYX,EACrBZ,EAAauB,UAAYR,GAG3B,MAAMS,QAAuBzC,EAAasB,GAG1CJ,EAAgBsB,UAAY,GAAGC,EAAelC,gBAC9CY,EAAaqB,UAAY,GAAGhC,EAAgBiC,EAAeC,eAC3D,MAAMC,ED/DO,KADsBlC,ECgEOgC,EAAeC,aD9DhD,CAAC,OAAQ,aACPjC,GAAQ,GAAKA,GAAQ,EACvB,CAAC,QAAS,aACA,IAARA,GAAsB,IAARA,EAChB,CAAC,YAAa,aACJ,IAARA,GAAsB,IAARA,GAAcA,GAAQ,IAAMA,GAAQ,IACvC,IAARA,GAAsB,IAARA,GAAcA,GAAQ,IAAMA,GAAQ,IAC1C,IAARA,GAAsB,IAARA,GAAcA,GAAQ,IAAMA,GAAQ,IAC1C,IAARA,GAAsB,IAARA,EACnB,CAAC,YAAa,QACJ,IAARA,GAAsB,IAARA,GAAsB,IAARA,EAC9B,CAAC,OAAQ,kBADX,EAZF,IAA8BA,ECiEnCE,SAASC,cAAc,QAAQY,MAAMoB,WAAa,8BAA8BD,EAAc,OAAOA,EAAc,KACrH,CAGAjC,EAAemC,iBAAiB,SA5DhC,WACEzB,GAAmBA,EACnBG,GACF,IA4DAZ,SAASC,cAAc,sBAAsBiC,iBAAiB,SA1D9DxD,iBACE,GAAI+B,EACFC,EAAWV,SAASC,cAAc,mBAAmBkC,UAChD,CACL,MAAMC,EAAiBpC,SAASG,iBAAiB,yBACjDQ,EAAY,GAAKyB,EAAe,GAAGD,MACnCxB,EAAY,GAAKyB,EAAe,GAAGD,KACrC,OACMlB,GACR,IAsDAL,IAGAyB,UAAUC,YAAYC,oBAAoB7D,eAAgB8D,GACxD,MAAMC,EAASD,EAAIC,OACnB9B,EAAY,GAAK8B,EAAOlD,SACxBoB,EAAY,GAAK8B,EAAOjD,UACxB,IAAIkD,QAAiB/D,EAAgB,cAAegC,GACpDD,EAAWgC,EAASpB,aAAaC,MAAM,MAAM,GAE7CX,IACAK,GACF","sources":["src/apiQueries.js","src/weatherDataHandling.js","src/index.js"],"sourcesContent":["\n// Checks location with custom query gotten by geolocation API\n// (Nominatim Geocoding API)\nexport async function checkLocationBy (queryType, query) {\n  const url = queryType == 'coordinates'\n    ? `https://nominatim.openstreetmap.org/reverse?format=json&lat=${query[0]}&lon=${query[1]}&zoom=10`\n    : `https://nominatim.openstreetmap.org/search?city=${query}&format=json`;\n  try {\n    let locationData = await fetch(url);\n    return await locationData.json();\n  } catch (e) {\n    console.error(e);\n    return {};\n  }\n}\n\n// Checks weather with weather API\n// (Open-Meteo Weather API)\nexport async function checkWeather (coordinates) {\n  const [latitude, longitude] = coordinates;\n  const url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true`;\n  let weatherData = await fetch(url);\n  weatherData = await weatherData.json();\n  if (weatherData.current_weather == undefined) {\n    console.error('Wasn\\'t possible to retrieve the weather data!');\n    return { temperature: '?' };\n  }\n  return weatherData.current_weather;\n}\n","\n// API returns a weather code, and here we decode it\nexport function forecastDecoder (code) {\n  switch (code) {\n    case 0: return 'Clear sky';\n    case 1: return 'Mainly clear';\n    case 2: return 'Partly cloudy';\n    case 3: return 'Overcast';\n    case 45: return 'Fog';\n    case 48: return 'Depositing rime fog';\n    case 51: return 'Light drizzle';\n    case 53: return 'Moderate drizzle';\n    case 55: return 'Dense intensity drizzle';\n    case 56: return 'Light freezing drizzle';\n    case 57: return 'Dense intensity freezing drizzle';\n    case 61: return 'Slight rain';\n    case 63: return 'Moderate rain';\n    case 65: return 'Heavy intensity rain';\n    case 66: return 'Light freezing rain';\n    case 67: return 'Heavy intensity freezing rain';\n    case 71: return 'Slight snow fall';\n    case 73: return 'Moderate snow fall';\n    case 75: return 'Heavy intensity snow fall';\n    case 77: return 'Snow grains';\n    case 80: return 'Slight rain showers';\n    case 81: return 'Moderate rain showers';\n    case 82: return 'Violent rain showers';\n    case 85: return 'Slight snow showers';\n    case 86: return 'Heavy snow showers';\n    case 95: return 'Slight or Moderate thunderstorm';\n    case 96: return 'Thunderstorm with slight hail';\n    case 99: return 'Thunderstorm with heavy hail';\n    default: return 'Unknown weather code';\n  }\n}\n\n// Getting colors by weather code for body's background\nexport function colorsByWeatherCode (code) {\n  if (code === 0) {\n    return ['gold', 'lightcyan'];\n  } else if (code >= 1 && code <= 3) {\n    return ['khaki', 'lightcyan'];\n  } else if (code == 45 || code == 48) {\n    return ['lightgray', 'lightblue'];\n  } else if (code == 51 || code == 53 || code >= 55 && code <= 57\n             || code == 61 || code == 63 || code >= 65 && code <= 67\n             || code == 71 || code == 73 || code >= 75 && code <= 77\n             || code == 85 || code == 86) {\n    return ['lightgray', 'snow'];\n  } else if (code == 95 || code == 96 || code == 99) {\n    return ['gray', 'lightgray'];\n  }\n}\n","\nimport {checkWeather, checkLocationBy} from './apiQueries.js';\nimport {forecastDecoder, colorsByWeatherCode} from './weatherDataHandling.js';\n\n\n// HTML elements\nconst queryMode_in = document.querySelector('#query-mode');\nconst querySwitch_in = queryMode_in.querySelector('#query-switch');\nconst queryModeLabels = document.querySelectorAll('.query-mode-label');\nconst controls = document.querySelector('#controls');\nconst city_out = document.querySelector('#city');\nconst cityInfo_out = document.querySelector('#city-info');\nconst temperature_out = document.querySelector('#temperature');\nconst forecast_out = document.querySelector('#forecast');\n\n\n// Global\nlet queryModeIsCity = true;\nlet cityName = '', coordinates = ['', ''];\n\nfunction updateQueryMode () {\n  if (queryModeIsCity) {\n    querySwitch_in.style.justifyContent = 'left';\n    queryModeLabels[0].style.color = '#999';\n    queryModeLabels[1].style.color = 'revert';\n    controls.innerHTML = `\n      <label>City:\n        <input type=\"text\" id=\"city-directive\" value=\"${cityName}\">\n      </label>\n    `;\n  } else {\n    querySwitch_in.style.justifyContent = 'right';\n    queryModeLabels[0].style.color = 'revert';\n    queryModeLabels[1].style.color = '#999';\n    controls.innerHTML = `\n      <label>Latitude:\n        <input type=\"text\" name=\"latitude\" class=\"coordinate-directive\" value=\"${coordinates[0]}\">\n      </label>\n      <label>Longitude:\n        <input type=\"text\" name=\"longitude\" class=\"coordinate-directive\" value=\"${coordinates[1]}\">\n      </label>\n    `;\n  }\n}\n\n// Toggle query mode\nfunction toggleQueryMode () {\n  queryModeIsCity = !queryModeIsCity;\n  updateQueryMode();\n}\n\nasync function submitQuery () {\n  if (queryModeIsCity) {\n    cityName = document.querySelector('#city-directive').value;\n  } else {\n    const coordinates_in = document.querySelectorAll('.coordinate-directive');\n    coordinates[0] = coordinates_in[0].value;\n    coordinates[1] = coordinates_in[1].value;\n  }\n  await updateWeatherData();\n}\n\nasync function updateWeatherData () {\n\n  let locationData;\n\n  if (queryModeIsCity) {\n    locationData = await checkLocationBy('cityName', cityName);\n    locationData = locationData[0];\n  } else {\n    locationData = await checkLocationBy('cityName', coordinates);\n  }\n\n  coordinates[0] = locationData.lat;\n  coordinates[1] = locationData.lon;\n\n  let city;\n  let cityInfo = [];\n\n  locationData.display_name.split(', ').forEach( (elem, i) => {\n    if (i === 0) {\n      city = elem\n    } else {\n      cityInfo.push(elem);\n    }\n  });\n  cityInfo = cityInfo.join('\\n');\n\n  if (city == undefined) {\n    city_out.innerText = 'Unknown';\n    cityInfo_out.innerText =  'Unknown';\n  } else {\n    city_out.innerText = city;\n    cityInfo_out.innerText = cityInfo;\n  }\n\n  const currentWeather = await checkWeather(coordinates);\n\n  // Setting the data into the DOM\n  temperature_out.innerText = `${currentWeather.temperature}ÂºC`;\n  forecast_out.innerText = `${forecastDecoder(currentWeather.weathercode)}`;\n  const weatherColors = colorsByWeatherCode(currentWeather.weathercode);\n  document.querySelector('body').style.background = `linear-gradient(to bottom, ${weatherColors[0]}, ${weatherColors[1]})`;\n}\n\n\nquerySwitch_in.addEventListener('click', toggleQueryMode);\n\n// Submiting weather parameters\ndocument.querySelector('#coordinate-submit').addEventListener('click', submitQuery);\n\n\n/* Initial protocol */\n\nupdateQueryMode();\n\n// Ask for location permission\nnavigator.geolocation.getCurrentPosition( async function (pos) {\n  const coords = pos.coords;\n  coordinates[0] = coords.latitude;\n  coordinates[1] = coords.longitude;\n  let cityData = await checkLocationBy('coordinates', coordinates);\n  cityName = cityData.display_name.split(', ')[0];\n\n  updateQueryMode();\n  updateWeatherData();\n});\n"],"names":["async","$d05573c605efa65c$export$44d85b255f9b995a","queryType","query","url","locationData","fetch","json","e","console","error","$d05573c605efa65c$export$c3b55a097e55870d","coordinates","latitude","longitude","weatherData","undefined","current_weather","temperature","$a36c64ef1282da12$export$dd34ce09c8ccaff2","code","$35da740d59af89ba$var$querySwitch_in","document","querySelector","$35da740d59af89ba$var$queryModeLabels","querySelectorAll","$35da740d59af89ba$var$controls","$35da740d59af89ba$var$city_out","$35da740d59af89ba$var$cityInfo_out","$35da740d59af89ba$var$temperature_out","$35da740d59af89ba$var$forecast_out","$35da740d59af89ba$var$queryModeIsCity","$35da740d59af89ba$var$cityName","$35da740d59af89ba$var$coordinates","$35da740d59af89ba$var$updateQueryMode","style","justifyContent","color","innerHTML","$35da740d59af89ba$var$updateWeatherData","city","lat","lon","cityInfo","display_name","split","forEach","elem","i","push","join","innerText","currentWeather","weathercode","weatherColors","background","addEventListener","value","coordinates_in","navigator","geolocation","getCurrentPosition","pos","coords","cityData"],"version":3,"file":"index.9353cad5.js.map"}