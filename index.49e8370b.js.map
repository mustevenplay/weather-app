{"mappings":"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","sources":["src/index.js"],"sourcesContent":["\n// HTML elements\nconst [latitude_in, longitude_in] = document.querySelectorAll('.coordinate-directive');\nconst city_out = document.querySelector('#city');\nconst cityInfo_out = document.querySelector('#city-info');\nconst temperature_out = document.querySelector('#temperature');\nconst forecast_out = document.querySelector('#forecast');\n\n// API returns a weather code, and here we decode it\nfunction forecastDecoder (code) {\n  switch (code) {\n    case 0: return 'Clear sky';\n    case 1: return 'Mainly clear';\n    case 2: return 'Partly cloudy';\n    case 3: return 'Overcast';\n    case 45: return 'Fog';\n    case 48: return 'Depositing rime fog';\n    case 51: return 'Light drizzle';\n    case 53: return 'Moderate drizzle';\n    case 55: return 'Dense intensity drizzle';\n    case 56: return 'Light freezing drizzle';\n    case 57: return 'Dense intensity freezing drizzle';\n    case 61: return 'Slight rain';\n    case 63: return 'Moderate rain';\n    case 65: return 'Heavy intensity rain';\n    case 66: return 'Light freezing rain';\n    case 67: return 'Heavy intensity freezing rain';\n    case 71: return 'Slight snow fall';\n    case 73: return 'Moderate snow fall';\n    case 75: return 'Heavy intensity snow fall';\n    case 77: return 'Snow grains';\n    case 80: return 'Slight rain showers';\n    case 81: return 'Moderate rain showers';\n    case 82: return 'Violent rain showers';\n    case 85: return 'Slight snow showers';\n    case 86: return 'Heavy snow showers';\n    case 95: return 'Slight or Moderate thunderstorm';\n    case 96: return 'Thunderstorm with slight hail';\n    case 99: return 'Thunderstorm with heavy hail';\n    default: return 'Unknown weather code';\n  }\n}\n\n// Getitng colors by weather code for body's background\nfunction colorsByWeatherCode (code) {\n  if (code === 0) {\n    return ['gold', 'lightcyan'];\n  } else if (code >= 1 && code <= 3) {\n    return ['khaki', 'lightcyan'];\n  } else if (code == 45 || code == 48) {\n    return ['lightgray', 'lightblue'];\n  } else if (code == 51 || code == 53 || code >= 55 && code <= 57\n             || code == 61 || code == 63 || code >= 65 && code <= 67\n             || code == 71 || code == 73 || code >= 75 && code <= 77\n             || code == 85 || code == 86) {\n    return ['lightgray', 'snow'];\n  } else if (code == 95 || code == 96 || code == 99) {\n    return ['gray', 'lightgray'];\n  }\n}\n\n// Checking for location with coordinates gotten by weather API\n// (Nominatim Geocoding API)\nasync function checkLocation (latitude, longitude) {\n  try {\n    const locationData = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&zoom=10`);\n    const locationDataObj = await locationData.json();\n\n    if (locationDataObj.display_name == undefined) {\n      return [undefined, undefined];\n    }\n\n    let city;\n    let cityInfo = [];\n\n    locationDataObj.display_name.split(', ').forEach( (elem, i) => {\n      if (i === 0) {\n        city = elem\n      } else {\n        cityInfo.push(elem);\n      }\n    });\n\n    return [city, cityInfo.join('\\n')];\n\n  } catch (e) {\n    console.error(e);\n    return [undefined, undefined];\n  }\n}\n\n// Updates and displays all weather data\n// (Open-Meteo Weather API)\nfunction updateWeatherData () {\n  const latitude = latitude_in.value;\n  const longitude = longitude_in.value;\n\n  const url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true`;\n\n  fetch(url)\n    .then( (response) => response.json())\n    .then( async (obj) => {\n      const current_weather = obj.current_weather;\n      const [city, cityInfo] = await checkLocation(latitude, longitude);\n\n      // Setting the data into the DOM\n      if (city == undefined) {\n        city_out.innerText = 'Unknown';\n        cityInfo_out.innerText =  'Unknown';\n      } else {\n        city_out.innerText = city;\n        cityInfo_out.innerText = cityInfo;\n      }\n      temperature_out.innerText = `${current_weather.temperature}ÂºC`;\n      forecast_out.innerText = `${forecastDecoder(current_weather.weathercode)}`;\n      const weatherColors = colorsByWeatherCode(current_weather.weathercode);\n      document.querySelector('body').style.background = `linear-gradient(to bottom, ${weatherColors[0]}, ${weatherColors[1]})`;\n    })\n    .catch(console.error);\n\n}\n\n// Submiting weather parameters\ndocument.querySelector('#coordinate-submit').addEventListener('click', updateWeatherData);\n\nupdateWeatherData();\n"],"names":["$35da740d59af89ba$var$latitude_in","$35da740d59af89ba$var$longitude_in","document","querySelectorAll","$35da740d59af89ba$var$city_out","querySelector","$35da740d59af89ba$var$cityInfo_out","$35da740d59af89ba$var$temperature_out","$35da740d59af89ba$var$forecast_out","$35da740d59af89ba$var$updateWeatherData","latitude","value","longitude","fetch","then","response","json","async","obj","current_weather","city","cityInfo","locationData","locationDataObj","undefined","display_name","split","forEach","elem","i","push","join","e","console","error","$35da740d59af89ba$var$checkLocation","innerText","temperature","code","$35da740d59af89ba$var$forecastDecoder","weathercode","weatherColors","style","background","catch","addEventListener"],"version":3,"file":"index.49e8370b.js.map"}